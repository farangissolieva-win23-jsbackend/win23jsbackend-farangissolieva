@page "/Account/Manage/ResetPasswordConfirmation"
@rendermode InteractiveServer

<PageTitle>Reset password confirmation</PageTitle>
<section class="registerConfirm">
    <div class="container">
        @if (!string.IsNullOrEmpty(MessageText))
        {
            <StatusMessageAlert MessageText="@MessageText" MessageType="@MessageType" />
        }

        <h1>Verify Your Password Change Code</h1>
        <EditForm FormName="verifypasswordcode" Model="VerifyCodeForm" OnValidSubmit="OnValidSubmit" novalidate>
            <DataAnnotationsValidator />
            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>Enter your Verification Code</label>
                    <InputText @bind-Value="VerifyCodeForm.Code" />
                    <ValidationMessage For="() => VerifyCodeForm.Code" />
                </div>
            </div>
            <button id="form-button" class="btn-theme-s" type="submit">Verify Code</button>
        </EditForm>
    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    public string? MessageType { get; set; }
    [SupplyParameterFromQuery]
    public string? MessageText { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string? Email { get; set; }

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    public string? CurrentPassword { get; set; }

    [SupplyParameterFromQuery]
    public string? NewPassword { get; set; }

    private VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

    public class VerifyCodeModel
    {
        [Required(ErrorMessage = "Verification Code is required")]
        [DataType(DataType.Text)]
        public string Code { get; set; } = null!;
    }

    private async Task OnValidSubmit()
    {
        if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(VerifyCodeForm.Code))
        {
            MessageText = "Invalid input.";
            MessageType = "danger";
            return;
        }

        var result = await Http.PostAsJsonAsync(Configuration["Varification_Provider_Validate_ApiUri"], new { Email, Code = VerifyCodeForm.Code });
        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email);
            if (user != null && !string.IsNullOrEmpty(CurrentPassword) && !string.IsNullOrEmpty(NewPassword))
            {
                var resetResult = await UserManager.ResetPasswordAsync(user, CurrentPassword, NewPassword);
                if (resetResult.Succeeded)
                {
                    MessageText = "Success: Your password has been changed successfully.";
                    await SignInManager.SignInAsync(user, isPersistent: false);
                    NavigationManager.NavigateTo("/Account/Manage/Security");
                }
                else
                {
                    MessageText = "Error: Failed to change password.";
                    MessageType = "danger";
                }
            }
            else
            {
                MessageText = "User not found or invalid password parameters.";
                MessageType = "danger";
            }
        }
        else
        {
            MessageText = "Invalid Code";
            MessageType = "danger";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Email))
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user == null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            MessageText = "User not found.";
            MessageType = "danger";
        }
    }
}
