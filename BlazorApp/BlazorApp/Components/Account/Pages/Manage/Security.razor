@page "/Account/Manage/Security"

<div class="container">
	<section id="account-security">
		<AsideProfile UserInfo="user" />

		<div class="details">
			@if (!string.IsNullOrEmpty(MessageText))
			{
				<StatusMessageAlert MessageText="@MessageText" MessageType="@MessageType" />
			}
				<section class="password-info">

				<EditForm method="post" Model="SecurityForm" FormName="securityform" OnValidSubmit="PasswordOnValidSubmitAsync" asp-route-ReturnUrl="@ReturnUrl" novalidate>
					<DataAnnotationsValidator />
					<h2>Security</h2>
					<h5>Password</h5>

					<div class="content">
						<div id="current-password" class="input-group">
							<label>Current Password</label>
							<ValidationMessage For="() => SecurityForm.CurrentPassword" />
							<InputText @bind-Value="SecurityForm.CurrentPassword" type="password" />
						</div>
						<div id="new-password" class="input-group">
							<label>Password</label>
							<ValidationMessage For="() => SecurityForm.Password" />
							<InputText @bind-Value="SecurityForm.Password" type="password" />
						</div>
						<div id="confirm-password" class="input-group">
							<label>Confirm Password</label>
							<ValidationMessage For="() => SecurityForm.ConfirmPassword" />
							<InputText @bind-Value="SecurityForm.ConfirmPassword" type="password" />
						</div>

						<div class="form-buttons">
							<button class="btn-gray" type="reset">Cancel</button>
							<button class="btn-theme" type="submit">Save password</button>
						</div>
					</div>
				</EditForm>
				</section>
				<hr />
				<section class="delete-account">
					<EditForm method="post" FormName="deleteform" Model="DeleteForm" OnValidSubmit="DeleteOnValidSubmitAsync" novalidate>
						<h5>Delete account</h5>
						<div class="content">
							<p>When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.</p>

							<div id="form-terms" class="checkbox">
								<div class="checkbox-group">
									<div class="input-group">
									<InputCheckbox @bind-Value="DeleteForm.Delete" />
										<label>Yes, I want to delete my account.</label>
									</div>
								</div>
							<ValidationMessage For="() => DeleteForm.Delete" />
							</div>
							<div class="form-button">
								<button class="btn-red" type="submit">Delete</button>
							</div>
						</div>
					</EditForm>
				</section>
			
		</div>
	</section>
</div>

@code {
	[SupplyParameterFromQuery]
	public string? MessageType { get; set; }
	[SupplyParameterFromQuery]
	public string? MessageText { get; set; }

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	[SupplyParameterFromForm]
	public SecurityFormModel SecurityForm { get; set; } = new SecurityFormModel();
	[SupplyParameterFromForm]
	public DeleteAccount DeleteForm { get; set; } = new DeleteAccount();

	private ApplicationUser user = default!;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		user = await UserAccessor.GetRequiredUserAsync(HttpContext);
	}

	private async Task PasswordOnValidSubmitAsync()
	{
		if (user.UserName != null && SecurityForm.CurrentPassword != null && SecurityForm.Password != null)
		{
			try
			{
				var resetToken = await UserManager.GeneratePasswordResetTokenAsync(user);
				var result = await UserManager.ResetPasswordAsync(user, resetToken, SecurityForm.Password);

				if (result.Succeeded)
				{
					MessageText = " Your password has been changed successfully.";
					MessageType = "success";
					SecurityForm = new SecurityFormModel();

				}
				else
				{
					MessageText = "Failed to change password.";
					MessageType = "error";
				}

			}
			catch
			{
				MessageText = "Failed to change password.";
				MessageType = "error";

			}
		}
	
		

	}

	private async Task DeleteOnValidSubmitAsync()
	{
		
		try
		{
			if (DeleteForm.Delete == true)
			{
				var result = await UserManager.DeleteAsync(user);
				if (!result.Succeeded)
				{
					MessageText = "Unexpected error occurred in deleting user.";
					MessageType = "Error";
				}

				await SignInManager.SignOutAsync();

				var userId = await UserManager.GetUserIdAsync(user);

				RedirectManager.RedirectTo("/");
			}
		}
		catch
		{
			MessageText = "Unexpected error occurred in deleting user.";
			MessageType = "Error";
		}



	}



	public class SecurityFormModel
	{
		[Required(ErrorMessage = "Current password is required")]
		[DataType(DataType.Password)]
		public string CurrentPassword { get; set; } = null!;


		[Required(ErrorMessage = "New password is required")]
		[DataType(DataType.Password)]
		[RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_\-+=])[A-Za-z\d!@#$%^&*()_\-+=]{8,}$", ErrorMessage = "Invalid password")]
		public string Password { get; set; } = null!;

		[Required(ErrorMessage = "Confirm new password")]
		[DataType(DataType.Password)]
		[Compare(nameof(Password), ErrorMessage = "Password does not match")]
		public string ConfirmPassword { get; set; } = null!;

	}

	public class DeleteAccount
	{
		public bool Delete { get; set; } = false;
	}

	
}