@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer


<PageTitle>Register confirmation</PageTitle>
<section class="registerConfirm">
    <div class="container">
        @if (string.IsNullOrEmpty(MessageText))
        {
            <StatusMessageAlert MessageText="@MessageText" MessageType="@MessageType" />
        }

        <h1>Verify You Account</h1>
        <p>Did't receive an email? <button @onclick="ResendCode">resend email</button></p>
        <EditForm method="post" FormName="verifycode" Model="VerifyCodeForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" novalidate>
            <DataAnnotationsValidator />
             <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>Enter your Verification Code</label>
                    <InputText @bind-Value="VerifyCodeForm.Code" />
                    <ValidationMessage For="() => VerifyCodeForm.Code" />
                </div>
            </div>
            <button id="form-button" class="btn-theme-s" type="submit">Verify Code</button>
        </EditForm>
    </div>
</section>



@code {

    [SupplyParameterFromQuery]
    public string MessageType { get; set; } = "";
    [SupplyParameterFromQuery]
    public string MessageText { get; set; } = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

    public class VerifyCodeModel
    {
        [Required(ErrorMessage = "Verification Code is required")]
        [DataType(DataType.Text)]
        public string Code { get; set; } = null!;
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        var result = await Http.PostAsJsonAsync(Configuration["Varification_Provider_Validate_ApiUri"], new { Email = Email, Code = VerifyCodeForm.Code });
        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email!);
            user!.EmailConfirmed = true;
            await UserManager.UpdateAsync(user);
            RedirectManager.RedirectTo("account/login");
        }
        else
        {
            MessageText = "Invalid Code";
            MessageType = "danger";
        }
    }

    private async Task ResendCode()
    {
        try
        {
            // send verification code
            await MessageService.SendMessageAsync("verification_request", Email!);

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo(
                    "Account/RegisterConfirmation",
                    new() { ["email"] = Email, ["returnUrl"] = ReturnUrl });
            }

            RedirectManager.RedirectTo(ReturnUrl);
            MessageText = "Code is resend to your email!";
            MessageType = "info";
        }
        catch
        {
            MessageText = "Unable to resend a Code, try again!";
            MessageType = "danger";
        }
        

    }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            MessageText = "Invalid Code";
            MessageType = "danger";
        }
        
    }
}
