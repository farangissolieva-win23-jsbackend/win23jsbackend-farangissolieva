@page "/Account/Manage/SavedCourses"
@inject BlazorApp.Data.ApplicationDbContext _context
@using Microsoft.EntityFrameworkCore;

<div class="container">
	<section id="saved-courses">

		<AsideProfile UserInfo="user" />

		<div class="details">
			<div class="title-bar">
				<h2>Saved items</h2>
				<form asp-controller="Account" asp-action="DeleteAllCourses" method="post">
					<button type="submit" class="btn-gray">
						<i class="fa-sharp fa-regular fa-trash"></i> Delete all
					</button>
				</form>
			</div>
			@if (!string.IsNullOrEmpty(MessageText))
			{
				<StatusMessageAlert MessageText="@MessageText" MessageType="@MessageType" />
			}
			<section class="content-contaier">
				@if (courses == null)
				{
					<p><em>No courses founded yet. Please wait...</em></p>
				}
				else
				{
					@foreach (var course in courses)
					{
						<div class="course-item">
							<div class="image-container">
								<img src="@course.ImgUrl" />
								<!-- Delete course button -->
								<form asp-controller="Account" asp-action="DeleteCourse" method="post">
									<input asp-for="@course.Id" name="id" type="hidden" value="@course.Id" />
									<button class="btn-sell" type="submit"><i class="fa-solid fa-bookmark"></i></button>
								</form>
								@if (course.IsBestseller == true)
								{
									<div class="badge">Best Seller</div>
								}
							</div>

							<div class="info">
								<a class="menu-link" href="@($"courses/course/{course.Id}")">@course.Title</a>
								<p>By @course.AuthorName</p>
								<div class="price">
									@if (course.Discount == 0)
									{
										<p>$@course.Price</p>
									}
									else
									{
										<p><span class="red">$@course.Discount</span> <span class="gray">$@course.Price</span></p>
									}

								</div>

								<hr />
								<div class="duration-rating">
									<div class="duration"><i class="fa-regular fa-clock"></i> @course.Hours</div>
									<div class="rating">
										<i class="fa-sharp fa-light fa-thumbs-up"></i>
										<p>94%</p>
										<p>@course.Reviews</p>
									</div>
								</div>
							</div>
						</div>
					}


				}
			</section>
		</div>


	</section>
</div>

@code {
	[SupplyParameterFromQuery]
	public string? MessageType { get; set; }
	[SupplyParameterFromQuery]
	public string? MessageText { get; set; }

	[SupplyParameterFromQuery]
	public string? ReturnUrl { get; set; }

	private List<CourseModel>? courses;
	private List<CourseModel>? allCourses = new List<CourseModel>();

	private ApplicationUser user = default!;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;
		
	protected override async Task OnInitializedAsync()
	{
		user = await UserAccessor.GetRequiredUserAsync(HttpContext);
		await LoadCoursesAsync();
	}
	
	private async Task LoadCoursesAsync()
	{
		try
		{
			var userCourseIds = await CourseService.GetUserCourseIdsAsync();
			var query = new GraphQLQuery
				{
					Query = "{ getCourses { id title likes likePercentage isBestseller imgUrl authors{authorName} prices{price discount} categoryEntity{id name} hours reviews } }"
				};
			var response = await Http.PostAsJsonAsync(Configuration["CoursesApiUri"], query);
			if (response.IsSuccessStatusCode)
			{
				var jsonResponse = await response.Content.ReadAsStringAsync();
				var result = System.Text.Json.JsonSerializer.Deserialize<DynamicGraphQLResponse>(jsonResponse);
				allCourses = result?.Data.GetProperty("getCourses").EnumerateArray()
					.Select(course => new CourseModel
						{
							Id = course.GetProperty("id").GetString()!,
							Title = course.GetProperty("title").GetString(),
							Likes = course.GetProperty("likes").GetString(),
							LikePercentage = course.GetProperty("likePercentage").GetString(),
							IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
							ImgUrl = course.GetProperty("imgUrl").GetString(),
							AuthorName = course.GetProperty("authors").EnumerateArray().First().GetProperty("authorName").GetString()!,
							Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
							Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal(),
							Hours = course.GetProperty("hours").GetString(),
							Reviews = course.GetProperty("reviews").GetString(),
							Category = new Category
							{
								Id = course.GetProperty("categoryEntity").GetProperty("id").GetInt32(),
								Name = course.GetProperty("categoryEntity").GetProperty("name").GetString()!
							}

					})
					.ToList() ?? new List<CourseModel>();
				courses = new List<CourseModel>(allCourses!);
				courses = allCourses.Where(course => userCourseIds.Contains(course.Id)).ToList();
			}

		}
		catch (Exception ex)
		{

			MessageText = $"Something went wrong. Try again!";
			MessageType = "error";
			Console.WriteLine(ex);
		}
	}

	

}